
1. 서비스 기획
	- 대표에 의해서 프로젝트 기획이 떨어진다. 
	-이후 기획자와 대표 그리고 개발자의 의견을 수렴하여 큰 기획 PPT를 제작한다.

2. 기능분석 및 설계
	- 개발자는 어떻게 만들까 고민하게 된다.
	지원플랫폼(아이폰,웹,안드로이드), 언어, 개발도구, 빌드도구(Gradle, Maven), 개발 플랫폼(스프링 부트) 
	운영 플랫폼(AWS), 필요한 기능...
	* 운영 플랫폼에서 회원정보는 개인정보 보호법에 걸려서 AWS에서 쓸 수 없다. 그래서 IDC를 이용
	IDC서버를 직접사거나 대여해서 사용한다.
	
	*MSA(마크로 서비스 아키텍쳐) 각각의 기능들을 부서가 담당하여 구현 및 처리한다.
	
	+ 버전관리 시스템(Git), 빌드배포 시스템(젠킨스, MS에저), 로그수집, 메일발송(Mail Chilmp,SendGrid),앱푸시,문자발송,
	개발환경(local, test, dev, beta[경우에따라서생략], prod), 데이터베이스
	
	*beta : 운영체제 데이터를 덤프로 가져와서 확인한다.
	
	*DB 도메인 설계 : 엔티티와 로직으로 구현.
	Ex) 판매상품은 책. 책은 유형별로 관리, 책은 작가가 축ㄹ판사를 통해 출간. 책은 서비스 관리자가 등록.
	
	*개발 방법론 - 애자일 ....등
	=> 요구사항이 쏟아져 나오므로 견본만들고 요구사항 수정하고 반복....
	
	*프로젝트 모듈 구성
	-common : 프로젝트에서 공통으로 사용하는 유틸리티, 예외
	-core : 프로젝트 도메인(@Entity, @Repository)
	-api : 외부에 정보를 제공하는 REST API 모듈
	-admin : 서비스를 관리하기 위한 백오피스
	-batch : 정기적으로 실행될 배치 프로그램 모음.
	-message : 알림톡, SMS, 메일 발송 등 담당.
	
	* 프로젝트 구성시 필수조건
	1. README를 작성.
	2. 실행절차를 설명
	3. 실행절차에 따라 빌드하고 실행되도록하라.
	4. 커밋 및 푸시는 테스트 및 빌드가 성공되었을때 하라.
	5. 코딩 컨벤션(Convention, 관례)은 팀원들과 함께 만들다.
	
	application-datasource.yml
	spring:
		profiles:
			include:
				- datasource
				- api
				
	-어디서 배포하고 운영할까?
	1. 클라우드
	2. IDE(Internet Data Center)
	
	* 지속적 통합과 지속적 배달(CI&CD)
	1. 여러 개발자가 Git에 내용을 push한다.
	2. 깃헙과 젠킨스가 웹훅으로 연결되어있고 깃헙이 푸쉬된 내용을 젠킨스에게 찌르고
	3. 젠킨스는 빌드하고 배포본을 만들지 그것을 S3라는 곳의 특정 디렉토리에 배포파일을 넣고
	EBS는 S3에가서 배포파일이 새로운지 확인하고 EC2에 집어넣는다. EC2는 서버라고 생각하면 될듯.
	
	*(EBS : Elastic Beans Talk)
	
3. 구현
	-기본적인 도메인 계층을 먼저 개발한다.
	@Repository
	@Entity
	
	-도메인간 서로 연계되는 부분이 있는 경우 서비스 계층에서 개발한다.
	@Service
	@Transaction 트랜잭션 관리도 이 영역에서!
	
	외부에 노출되는 부분에서는 표현 계층에서 개발한다.
	@Controller, @RestController + @ViewController
	@RequestMapping
	ModelAndView

4. 빌드
	

5. 배포

6. 운영